---
AWSTemplateFormatVersion: '2010-09-09'
Description: Template to launch PipeIT Standalone Application
Metadata:
  AWS::CloudFormation::Interface:
    ParameterLabels:
      Operation:
        default: Schema Operation Name
      Version:
        default: EC 
      instancetypePipeIT:
        default: Instance Type
      KeyName_PipeIT:
        default: SSH key Name
      AppSecurityGroup:
        default: App Security Group
      AppLBSecurityGroup:
        default: App LB Security Group
      AccountName:
        default: Account Name
      LBSchemaPipeIT:
        default: LB Schema
      EnvName:
        default: Tieto Env name (ref, dev, ci)
      ecr:
        default: Enter the image ARN of ECR 
      imagetag:
        default: Enter the image tag 
      License:   
        default: Enter the domain name of the license server 
      containern:
        default: Enter the container name
      #seconderystoragePipeIT:
        #default: Secondery Storage Size in GB

    ParameterGroups:
      - Label:
          default: Customer Details
        Parameters:
          - AccountName
          - EnvName
      - Label:
          default: Instance Details
        Parameters:
          - AccountName 
          - TietoENVName 
          - REGION 
          - instancetypePipeIT 
          - amiPipeIT 
          - vpc 
          - asgsubnets 
          - lbsubnets 
          # - lbsubnets2 
          - LBSchemaPipeIT 
          - keynamePipeIT
          - appsecuritygroup 
          - applbsecuritygroup 
          # - seconderystoragePipeIT
          - ecr 
          - imagetag 
          #- licenseserver
          - containername
Parameters:
  
  TietoENVName:
    Description: Tieto Env name
    Type: String
  LBSchemaPipeIT:
    Description:
      Tell us whether the load balancer is internal or Internet-facing
    Type: String
    Default: internet-facing
    AllowedValues:
      - internet-facing
      - internal
  AccountName:
    Description:
      Please Enter the name of the customer. (eg. CustomerName-AssetName)
    Type: String
  instancetypePipeIT:
    Description: Application EC2 instance type
    Type: String
    ConstraintDescription: must be a valid EC2 instance type.
  amiPipeIT :
    Description: AMI to use for App instances.
    Type: AWS::EC2::Image::Id
  keynamePipeIT:
    Description: Name of an existing EC2 KeyPair
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.\
  vpc:
    Description: VPC to launch App
    Type: AWS::EC2::VPC::Id
  asgsubnets:
    Description: IDs of the subnet for ASG
    Type: List<AWS::EC2::Subnet::Id>
  lbsubnets:
    Description: IDs of the subnet for LB
    Type: List<AWS::EC2::Subnet::Id>
  # lbsubnets2:
  #   Description: IDs of the subnet for LB
  #   Type: List<AWS::EC2::Subnet::Id>
  # seconderystoragePipeIT:
  #   Description: Secondery storage Size in GB
  #   Type: Number
  #   Default: 10
  appsecuritygroup:
    Type: String
    Description: App Security Group Id
  applbsecuritygroup:
    Type: String
    Description: App LB Security Group Id
  ecr:
     Type: String
     Description: Enter the image ARN of ECR 
  imagetag:
     Type: String
     Description: Enter the image tag 
  REGION:
     Type: String
     Description: Enter the region  
  # licenseserver:   
  #    Type: String
  #    Description: Enter the domain name of the license server 
  containername:   
     Type: String
     Description: Enter the container name    
Resources:
  
  AppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: !Ref LBSchemaPipeIT
      Subnets: !Ref lbsubnets
      SecurityGroups:
        - !Ref applbsecuritygroup
  AppTargetGroup8085:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      UnhealthyThresholdCount: 3
      HealthCheckPath: /
      Port: 8085
      Protocol: HTTP
      VpcId: !Ref vpc
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60
  AppLBListener8085:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AppTargetGroup8085
      LoadBalancerArn: !Ref AppLB
      Port: 8085
      Protocol: HTTP        
  AppASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref AppLC
      MinSize: 1
      DesiredCapacity: 1
      MaxSize: 1
      HealthCheckType: EC2
      HealthCheckGracePeriod: 600
      VPCZoneIdentifier: !Ref asgsubnets
      Tags:
        - Key: Name
          PropagateAtLaunch: true
          Value: !Ref AWS::StackName
      TargetGroupARNs:
        - !Ref AppTargetGroup8085
    
  AppLC:
    Type: AWS::AutoScaling::LaunchConfiguration
   
    Properties:
      ImageId: !Ref amiPipeIT 
      InstanceMonitoring: true
      SecurityGroups:
        - !Ref appsecuritygroup
      InstanceType: !Ref instancetypePipeIT
      IamInstanceProfile:
        Fn::Join:
          - ''
          - - 'arn:aws:iam::'
            - !Sub "${AWS::AccountId}:instance-profile/ECAppInstanceProfile-${AWS::AccountId}-${AWS::Region}"
      KeyName: !Ref keynamePipeIT
      # BlockDeviceMappings:
      #   - DeviceName: /dev/xvdb
      #     Ebs:
      #       VolumeSize: !Ref seconderystoragePipeIT
            
      UserData:
        Fn::Base64:
          !Sub |
              #!/bin/bash
              yum update -y
              sudo adduser pipeit 
              echo "pipeit:T!eto@753159" | sudo chpasswd 
              sudo echo "pipeit     ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers 
              chmod 700 /etc/ssh/sshd_config 
              sudo sed -i 's/#MaxSessions 10/PasswordAuthentication yes/g'  /etc/ssh/sshd_config
              sudo bash -c "sed -i 's/#MaxSessions 10/PasswordAuthentication yes/g'  /etc/ssh/sshd_config"
              sudo service sshd restart
              yum install -y docker
              usermod -a -G docker ec2-user
              service docker start
              /sbin/iptables -A INPUT -m state --state NEW -p tcp --dport 8085 -j ACCEPT
              $(aws ecr get-login --no-include-email --region ap-southeast-2)
              docker pull ${ecr}:${imagetag}
              docker run --name ${containername} -d -p 8085:8085 ${ecr}:${imagetag}

