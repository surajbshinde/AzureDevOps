---
AWSTemplateFormatVersion: '2010-09-09'
Description: Template to launch EC Application
Metadata:
  AWS::CloudFormation::Interface:
    ParameterLabels:
      Operation:
        default: Schema Operation Name
      ArtefactVersion:
        default: Artefact Version
      WildflyVersion:
        default: Wildfly Version
      EarfileName:
        default: Ear file name
      DBHostName:
        default: Database Hostname
      DBSID:
        default: Database SID
      InstanceType:
        default: Instance Type
      KeyName:
        default: SSH key Name
      SeconderyStorageSpaceSize:
        default: Secondery Storage Size in GB
      ScriptFilename:
        default: wildfly Installation script file name
      AppSecurityGroup:
        default: App Security Group
      AppLBSecurityGroup:
        default: App LB Security Group
      AccountName:
        default: Account Name
      LBSchema:
        default: LB Schema
      SslCertificateARN:
        default: SSL Certificate ARN
      EnvName:
        default: Tieto Env name (ref, dev, ci)
      EncryptPassword:
        default: Encrypt password?
      SchemaPassword:
        default: Schema 
      KeyCloakPassword:
        default: KeyCloak Password
      FQDN:
        default: app.tieto.com
      EnableProxy:
        default: Enable proxy?
      LBForwardToPort:
        default: LB forward to port
      LBForwardToProtocol:
        default: LB forward to protocol
      WildflyPort:
        default: Application port
      WildflyProtocol:
        default: Application Protocol
      DatadogAPIKey:
        default: Datadog API Key
    ParameterGroups:
      - Label:
          default: Customer Details
        Parameters:
          - AccountName
          - EnvName
      - Label:
          default: App Details
        Parameters:
          - Operation
          - ArtefactVersion
          - WildflyVersion
          - EarfileName
          - DBHostName
          - DBSID
          - LBForwardToPort
          - LBForwardToProtocol
          - WildflyPort
          - WildflyProtocol
          - DatadogAPIKey
      - Label:
          default: Instance Details
        Parameters:
          - InstanceType
          - AMI
          - VPC
          - ASGSubnets
          - LBSubnets
          - LBSchema
          - KeyName
          - SslCertificateARN
          - AppSecurityGroup
          - AppLBSecurityGroup
          - SeconderyStorageSpaceSize
      - Label:
          default: App Initialize Script Details
        Parameters:
          - ScriptFilename
          - SchemaPassword
          - EncryptPassword
          - EnableProxy
          - KeyCloakPassword
          - FQDN

Parameters:
  LBForwardToPort:
    Description: LBForwardToPort
    Type: String
  LBForwardToProtocol:
    Description: LBForwardToProtocol
    Type: String
  WildflyPort:
    Description: WildflyPort
    Type: String
  WildflyProtocol:
    Description: WildflyProtocol
    Type: String
  DatadogAPIKey:
    Description: Datadog API KEY
    Type: String
  SchemaPassword:
    Description: Schema password
    Type: String
    Default: energy
    NoEcho: true
  EncryptPassword:
    Description: passwords will be encrypted if checked
    Type: String
    Default: "YES"
    AllowedValues:
      - "YES"
      - "NO"
  KeyCloakPassword:
    Description: KeyCloak password
    Type: String
    Default: admin
    NoEcho: true
  FQDN:
    Description: FQDN
    Type: String
  EnableProxy:
    Description: Proxy will be enabled if checked
    Type: String
    Default: "YES"
    AllowedValues:
      - "YES"
      - "NO"
  EnvName:
    Description: Tieto Env name
    Type: String
  SslCertificateARN:
    Description: ARN of valid SSL certificate
    Type: String
  LBSchema:
    Description:
      Tell us whether the load balancer is internal or Internet-facing
    Type: String
    Default: internet-facing
    AllowedValues:
      - internet-facing
      - internal
  AccountName:
    Description:
      Please Enter the name of the customer. (eg. CustomerName-AssetName)
    Type: String
  InstanceType:
    Description: Application EC2 instance type
    Type: String
    Default: t2.medium
    ConstraintDescription: must be a valid EC2 instance type.
  AMI:
    Description: AMI to use for App instances.
    Type: AWS::EC2::Image::Id
  KeyName:
    Description: Name of an existing EC2 KeyPair
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.\
  VPC:
    Description: VPC to launch App
    Type: AWS::EC2::VPC::Id
  ASGSubnets:
    Description: IDs of the subnet for ASG
    Type: List<AWS::EC2::Subnet::Id>
  LBSubnets:
    Description: IDs of the subnet for LB
    Type: List<AWS::EC2::Subnet::Id>
  SeconderyStorageSpaceSize:
    Description: Secondery storage Size in GB (D:\)
    Type: Number
    Default: 5
  ScriptFilename:
    Type: String
    Description: wildfly Installation script file name
    Default: ecdeployercustom.ps1
  Operation:
    Type: String
    Description: Schema Operation Name
  ArtefactVersion:
    Type: String
    Description: Artefacts Version
  WildflyVersion:
    Type: String
    Description: Wildfly Version
  EarfileName:
    Type: String
    Description: Ear file name.
  DBHostName:
    Type: String
    Description: Database Hostname
  DBSID:
    Type: String
    Description: Database SID
  AppSecurityGroup:
    Type: String
    Description: App Security Group Id
  AppLBSecurityGroup:
    Type: String
    Description: App LB Security Group Id

Resources:
  AppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: !Ref LBSchema
      Subnets: !Ref LBSubnets
      SecurityGroups:
        - !Ref AppLBSecurityGroup
  AppLBListener8543:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AppTargetGroup8543
      LoadBalancerArn: !Ref AppLB
      Port: 8543
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-2016-08
      Certificates:
        - CertificateArn: !Ref SslCertificateARN

  
  AppLBListener443:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AppTargetGroup8443
      LoadBalancerArn: !Ref AppLB
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-2016-08
      Certificates:
        - CertificateArn: !Ref SslCertificateARN
  
  LoadBalancerListenerRule1:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref AppTargetGroup8543
      Conditions:
        - Field: path-pattern
          Values:
              - "/auth/*"
      ListenerArn: !Ref AppLBListener443
      Priority: 1

  AppTargetGroup8543:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      UnhealthyThresholdCount: 3
      HealthCheckPath: /
      Port: 8543
      Protocol: HTTPS
      VpcId: !Ref VPC
      HealthCheckPort: 8543
      HealthCheckProtocol: !Ref WildflyProtocol
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60
  AppTargetGroup8443:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      UnhealthyThresholdCount: 3
      HealthCheckPath: /
      Port: 8443
      HealthCheckPort: 8443
      HealthCheckProtocol: !Ref WildflyProtocol
      Protocol: !Ref LBForwardToProtocol
      VpcId: !Ref VPC
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60
  AppASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref AppLC
      MinSize: 1
      DesiredCapacity: 1
      MaxSize: 1
      HealthCheckType: EC2
      HealthCheckGracePeriod: 600
      VPCZoneIdentifier: !Ref ASGSubnets
      Tags:
        - Key: Name
          PropagateAtLaunch: true
          Value: !Ref AWS::StackName
        - Key: AccountName
          PropagateAtLaunch: true
          Value: !Ref AccountName
        - Key: Env
          PropagateAtLaunch: true
          Value: !Ref EnvName
        - Key: OSType
          PropagateAtLaunch: true
          Value: Windows
        # - Key: openjdk
        #   PropagateAtLaunch: true
        #   Value: 11.0.2
        # - Key: jre
        #   PropagateAtLaunch: true
        #   Value: 1.8.0
        - Key: DatadogAgent
          PropagateAtLaunch: true
          Value: 6.5.1
        - Key: DeepSecurityAgent
          PropagateAtLaunch: true
          Value: 11.1.0
        - Key: Wildfly
          PropagateAtLaunch: true
          Value: !Ref WildflyVersion  
        - Key: InstanceType
          PropagateAtLaunch: true
          Value: !Ref InstanceType
        - Key: ThirdPartyDistributions
          PropagateAtLaunch: true
          Value:
            !Sub 'DatadogAgent:6.5.1, DeepSecurityAgent:11.1.194,WildflyVersion:${WildflyVersion}'
        - Key: TietoDistributions
          PropagateAtLaunch: true
          Value:
            !Sub 'EC:${ArtefactVersion}'
      TargetGroupARNs:
        - !Ref AppTargetGroup8543
        - !Ref AppTargetGroup8443
    CreationPolicy:
      ResourceSignal:
        Timeout: PT60M
        Count: 1
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 1
        PauseTime: PT60M
        WaitOnResourceSignals: true
  AppLC:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          config:
            - InitializeDisks
            - InstallAWSCLI
            - createScriptfiles
            - SyncTime
            - installPrerequisites
            - InstallOpenjdk
            #- SetAWSPath
            - InstallDSAgent
            - InstallDataDogAgent
            - rebootSystem
            - enableMonitoring
            - InstallApp
            - OpenfirewallPorts
            - executeCustomScript
            - SendCFNSignal
        InitializeDisks:
          commands:
            InitializeDisksScript:
              command:
                !Join
                - ' '
                - - powershell.exe
                  - '-Command'
                  - 'C:\ProgramData\Amazon\EC2-Windows\Launch\Scripts\InitializeDisks.ps1'
              waitAfterCompletion: 10
        InstallAWSCLI:
          packages:
            msi:
              awscli: https://s3.amazonaws.com/aws-cli/AWSCLI64.msi
        createScriptfiles:
          files:
            c:\cfn\cfn-hup.conf:
              content:
                !Sub |
                  [main]
                  stack=${AWS::StackName}
                  region=${AWS::Region}
            c:\cfn\hooks.d\cfn-auto-reloader.conf:
              content:
                !Sub |
                  [cfn-auto-reloader-hook]
                  triggers=post.update
                  path=Resources.AppLC.Metadata.AWS::CloudFormation::Init
                  action=cfn-init.exe -v -c config -s ${AWS::StackId} ^
                  -r AppLC --region ${AWS::Region}
            c:\scripts\getAndRunDsAgentDeploymentScript.ps1:
              content:
                !Sub |
                  $remote = "s3://${AWS::AccountId}-${AWS::Region}-artefacts/"
                  $remote +="ds-agent/AgentDeploymentScript.ps1"
                  $local = "C:\scripts\AgentDeploymentScript.ps1"
                  $awscli = "C:\Program Files\Amazon\AWSCLI\aws.exe"
                  & $awscli s3 cp $remote $local
                  c:\scripts\AgentDeploymentScript.ps1
            c:\scripts\getAndRunDatadogAgentDeploymentScript.ps1:
              content:
                !Sub |
                  $remote = "s3://${AWS::AccountId}-${AWS::Region}-artefacts/"
                  $remote +="datadog-agent/datadog-agent-6-latest.amd64.msi"
                  $local = "D:\SoftwaresInstallers\datadog-agent-6-latest.amd64.msi"
                  $awscli = "C:\Program Files\Amazon\AWSCLI\aws.exe"
                  & $awscli s3 cp $remote $local
                  msiexec /qn /i D:\SoftwaresInstallers\datadog-agent-6-latest.amd64.msi APIKEY="${DatadogAPIKey}"
            c:\scripts\installopenjdk.ps1:
              content:
                !Sub |
                  $remote = "s3://${AWS::AccountId}-${AWS::Region}-artefacts/"
                  $remote +="generic-installers/openjdk-11.0.2_windows-x64_bin.zip"
                  $local = "D:\SoftwaresInstallers\openjdk-11.0.2_windows-x64_bin.zip"
                  $destin = "D:\SoftwaresInstallers"
                  $awscli = "C:\Program Files\Amazon\AWSCLI\aws.exe"
                  & $awscli s3 cp $remote $local
                  Expand-Archive $local $destin
                  echo $env:Path
                  $oldpath = (Get-ItemProperty -Path 'Registry::HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager\Environment' -Name PATH).path
                  $newpath = "$oldpath;D:\SoftwaresInstallers\jdk-11.0.2\bin\"
                  Set-ItemProperty -Path 'Registry::HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager\Environment' -Name PATH -Value $newPath
                  setx /m JAVA_HOME "D:\SoftwaresInstallers\jdk-11.0.2"
                  #setx -m PATH "%PATH%;D:\SoftwaresInstallers\jdk-11.0.2\bin"
                  echo $env:Path
                  echo $env:JAVA_HOME
                 # & 7z.exe x $local -o"D:\ApplicationTools\OpenJDK" -y
                  #& powershell.exe -nologo -noprofile -command "& { Add-Type -A 'System.IO.Compression.FileSystem'; [IO.Compression.ZipFile]::ExtractToDirectory('openjdk-11.0.2_windows-x64_bin.zip', 'jdk-11.0.2');
            c:\scripts\configureMonitoring.ps1:
              content:
                !Sub |
                  $remote = "s3://${AWS::AccountId}-${AWS::Region}-artefacts/"
                  $remote +="cw-settings/AWS.EC2.Windows.CloudWatch.json"
                  $local = "C:\Program Files\Amazon\SSM\Plugins\awsCloudWatch\"
                  $local += "AWS.EC2.Windows.CloudWatch.json"
                  $awscli = "C:\Program Files\Amazon\AWSCLI\aws.exe"
                  & $awscli s3 cp $remote $local
                  (Get-Content $local).replace("{stack_name}", `
                  "${AWS::StackName}") | Set-Content $local
                  (Get-Content $local).replace("{ENV}", `
                  "${EnvName}") | Set-Content $local
                  (Get-Content $local).replace("{ACCOUNT}", `
                  "${AccountName}") | Set-Content $local
                  (Get-Content $local).replace("{region}", `
                  "${AWS::Region}") | Set-Content $local
                  (Get-Content $local).replace("{operation}", `
                  "${Operation}") | Set-Content $local
                  (Get-Content $local).replace("{wildflyVersion}", `
                  "${WildflyVersion}") | Set-Content $local
                  $logDir = "D:\EnergyComponents\Wildfly_${Operation}\"
                  $logDir += "wildfly-10.1.0.Final\domain\servers\ec-server\log"
                  icacls $logDir /q /c /t /grant Users:F
                  Restart-Service AmazonSSMAgent
            c:\scripts\prerequisiteInstaller.ps1:
              content:
                !Sub |
                  $softwares_dir = 'D:\SoftwaresInstallers'
                  If (!(Test-Path -Path $softwares_dir -PathType Container)){
                    New-Item -Path $softwares_dir -ItemType Directory | Out-Null
                  }
                  $s3Location =
                    "s3://${AWS::AccountId}-${AWS::Region}-artefacts/"
                  $s3Location += "generic-installers/"
                  $packages = @(
                    @{
                      title='7zip Extractor';
                      url='7z920-x64.msi';
                      Arguments=' /qn'
                    }
                    @{
                      title='Notepad++ 7.5.4';
                      url='npp.7.5.4.installer.x64.msi';
                      Arguments=
                      ' /qn'
                    }
                    @{
                      title='WinScp 5.13.1';
                      url='WinSCP-5.13.1-Setup.exe';
                      Arguments=' /VERYSILENT'
                    }
                    @{
                      title='MSQLClient';
                      url ='SSMS-Setup-ENU.exe';
                      Arguments=' /Q /S'
                    }
                  )
                  foreach ($package in $packages) {
                    Write-Output "#####################################"
                      $packageName = $package.title
                      $fileName = Split-Path $package.url -Leaf
                      $destinationPath = $softwares_dir + "\" + $fileName
                      $Arguments = $package.Arguments
                      If (!(Test-Path -Path $destinationPath -PathType Leaf)) {
                          Write-Output "Downloading $packageName"
                          & 'C:\Program Files\Amazon\AWSCLI\aws.exe' `
                            s3 cp ($s3Location + $package.url) $destinationPath
                          Write-Output "Downloaded $packageName"
                      }
                      Write-Output "Installing $packageName"
                      Invoke-Expression -Command "$destinationPath $Arguments"
                      Start-Sleep -s 15
                      Write-Output "Install complete $packageName"
                    Write-Output "#####################################"
                  }
                  $processExplorer = 'procexp64.exe'
                  Write-Output "Downloading Process explorer"
                  $destinationPath = "D:\\ApplicationTools\\processExplorer\\procexp64.exe"
                  & 'C:\Program Files\Amazon\AWSCLI\aws.exe' `
                            s3 cp ($s3Location + $processExplorer) `
                            $destinationPath
                  Write-Output "Downloaded $packageName"
                  write-Output "creating shortcut for processExplorer"
                  $WshShell = New-Object -comObject WScript.Shell
                  $Shortcut = $WshShell.CreateShortcut(
                    "$Home\Desktop\process Explorer.lnk"
                  )
                  $Shortcut.TargetPath = $destinationPath
                  $Shortcut.Save()
                  #setx -m PATH "%PATH%;C:\Program Files\7-Zip"
            # c:\scripts\jreinstaller.ps1:
            #   content:
            #     !Sub |
            #       $softwares_dir = 'D:\SoftwaresInstallers'
            #       If (!(Test-Path -Path $softwares_dir -PathType Container)){
            #         New-Item -Path $softwares_dir -ItemType Directory | Out-Null
            #       }
            #       $s3Location =
            #         "s3://${AWS::AccountId}-${AWS::Region}-artefacts/"
            #       $s3Location += "generic-installers/"
            #       $packages = @(
            #         @{
            #           title='JRE 1.8.121';
            #           url = 'jre-8u171-windows-x64.exe';
            #           Arguments=' /s'
            #         }
            #       )
            #       foreach ($package in $packages) {
            #         Write-Output "#####################################"
            #           $packageName = $package.title
            #           $fileName = Split-Path $package.url -Leaf
            #           $destinationPath = $softwares_dir + "\" + $fileName
            #           $Arguments = $package.Arguments
            #           If (!(Test-Path -Path $destinationPath -PathType Leaf)) {
            #               Write-Output "Downloading $packageName"
            #               & 'C:\Program Files\Amazon\AWSCLI\aws.exe' `
            #                 s3 cp ($s3Location + $package.url) $destinationPath
            #               Write-Output "Downloaded $packageName"
            #           }
            #           Write-Output "Installing $packageName"
            #           Invoke-Expression -Command "$destinationPath $Arguments"
            #           Start-Sleep -s 120
            #           Write-Output "Install complete $packageName"
            #         Write-Output "#####################################"
            #       }

            # ##Adding code for openjdk installer
            # c:\scripts\executeOpenjdkScript.ps1:
            #   content:
            #     !Sub |
            #       cd D:\
            #       & "C:\Program Files\7-Zip\7z.exe" x openjdk-11.0.2_windows-x64_bin.zip -o"D:\ApplicationTools\OpenJDK"


            c:\scripts\executeInstaller.ps1:
              content:
                !Sub |
                  cd D:\
                  powershell.exe -executionpolicy unrestricted `
                  -file 'D:\${ScriptFilename}' `
                  -operationName '${Operation}' `
                  -schemaVersion '${ArtefactVersion}' `
                  -WildflyVersion '${WildflyVersion}' `
                  -EAR '${EarfileName}' `
                  -DBHost '${DBHostName}' `
                  -DBServiceName '${DBSID}' `
                  -EncryptPassword '${EncryptPassword}' `
                  -schemaPassword '${SchemaPassword}' `
                  -keyCloakPassword '${KeyCloakPassword}' `
                  -EnableProxy '${EnableProxy}' `
                  -FQDN '${FQDN}' `
                  -RootDrive 'D:' `
                  -EnableSSL 'YES'
            c:\scripts\executeCustomScript.ps1:
              content:
                !Sub |
                  cd D:\
                  Remove-Item D:\modify.ps1 `
                  -Force -Recurse -ErrorAction SilentlyContinue
                  $remote = "s3://${AWS::AccountId}-${AWS::Region}-artefacts/"
                  $remote += "ec-customizations-dev"
                  aws s3 cp $remote/modify.ps1 D:\
                  aws s3 cp $remote/params.properties D:\
                  if(Test-Path D:\modify.ps1){
                      D:\modify.ps1 -account ${AWS::AccountId} -region ${AWS::Region}
                  }
                  else{
                    echo "Custom script is not available"
                  }
            C:\scripts\syncTime.ps1:
              content:
                !Sub |
                  net stop w32time
                  w32tm /config /syncfromflags:manual /manualpeerlist:"169.254.169.123"
                  w32tm /config /reliable:yes
                  net start w32time
          services:
            windows:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - c:\cfn\cfn-hup.conf
                  - c:\cfn\hooks.d\cfn-auto-reloader.conf
        SyncTime:
          commands:
            00-ExecuteTimeSyncScript:
              command: powershell.exe -Command C:\scripts\syncTime.ps1
        installPrerequisites:
          commands:
            00-RunPrerequisitesInstaller:
              command:
                powershell.exe -Command C:\scripts\prerequisiteInstaller.ps1
              waitAfterCompletion: 120
            # 01-setJavaHome:
            #   waitAfterCompletion: 3
            #   command: setx /m JAVA_HOME "D:\ApplicationTools\OpenJdk\jdk-11.0.2\bin\"
            # 02-setJREHome:
            #   waitAfterCompletion: 3
            #   command: setx /m JRE_HOME "D:\ApplicationTools\Java\jre-1.8.121"
            03-SetPaths:
              waitAfterCompletion: 30
              command:
                Fn::Join:
                  - ''
                  - - 'setx /m PATH "%path%;'
                    - 'C:\Program Files\7-Zip\;'
                    - 'C:\Program Files\Amazon\AWSCLI\;"'
        InstallOpenjdk:
          commands:
            00-installopnjdk:
              waitAfterCompletion: 180
              command: powershell.exe -Command c:\scripts\installopenjdk.ps1
            # 02-setJavaHome:
            #   waitAfterCompletion: 30
            #   command: setx -m JAVA_HOME "D:\SoftwaresInstallers\jdk-11.0.2"
            # 03-SetPath:
            #   waitAfterCompletion: 3
            #   command:
            #     Fn::Join:
            #       - ''
            #       - - 'setx /m PATH "%path%;'
            #         - '%JAVA_HOME%\bin\;"'
        rebootSystem:
          commands:
            00-rebootSystem:
              command: shutdown /r /t 0
              waitAfterCompletion: forever
        
        
        # SetAWSPath:
        #   commands:
        #     01-SetPaths:
        #       waitAfterCompletion: 30
        #       command:
        #         Fn::Join:
        #           - ''
        #           - - 'setx -m PATH "%path%;'
        #            # - '%JAVA_HOME%\bin\;'
        #             - 'C:\Program Files\7-Zip\;'
        #             - 'C:\Program Files\Amazon\AWSCLI\;"'
       
        InstallApp:
          commands:
            00-getInstallScript:
              waitAfterCompletion: 5
              command:
                Fn::Join:
                  - ''
                  - - 'aws s3 cp '
                    - !Sub 's3://${AWS::AccountId}-${AWS::Region}-artefacts/'
                    - !Sub 'wildfly-installation-scripts/${ScriptFilename} D:\'
            01-getAppBinary:
              waitAfterCompletion: 3
              command:
                Fn::Join:
                  - ''
                  - - 'aws s3 cp '
                    - !Sub 's3://${AWS::AccountId}-${AWS::Region}-artefacts'
                    - !Sub '/wildfly/ec-app-install-${ArtefactVersion}-distribution.zip D:\'
            02-getAppEar:
              waitAfterCompletion: 3
              ignoreErrors: true
              command:
                Fn::Join:
                  - ''
                  - - 'aws s3 cp '
                    - !Sub 's3://${AWS::AccountId}-${AWS::Region}-artefacts'
                    - !Sub '/ear-files/${EarfileName} D:\'
            
            03-run-installer:
              waitAfterCompletion: 30
              command: powershell.exe -Command c:\scripts\executeInstaller.ps1
        OpenfirewallPorts:
          commands:
            Port8443:
              waitAfterCompletion: 3
              command:
                Fn::Join:
                  - ''
                  - - 'netsh advfirewall firewall add rule name="Open Port 8443" '
                    - ' dir=in action=allow protocol=TCP localport=8443'
            Port443:
              waitAfterCompletion: 3
              command:
                Fn::Join:
                  - ''
                  - - 'netsh advfirewall firewall add rule name="Open Port 443"'
                    - ' dir=in action=allow protocol=TCP localport=443'
            Port8543:
              waitAfterCompletion: 3
              command:
                Fn::Join:
                  - ''
                  - - 'netsh advfirewall firewall add rule '
                    - ' name="Open Port 8543" '
                    - ' dir=in action=allow protocol=TCP localport=8543'
   
            # PortWildfly:
            #   waitAfterCompletion: 3
            #   command:
            #     Fn::Join:
            #       - ''
            #       - - 'netsh advfirewall firewall add rule '
            #         - !Sub ' name="Open WildflyPort ${WildflyPort}" '
            #         - !Sub ' dir=in action=allow protocol=TCP localport=${WildflyPort}'
        executeCustomScript:
          commands:
            executeScripts:
              waitAfterCompletion: 10
              command:
                powershell.exe -Command c:\scripts\executeCustomScript.ps1
                #powershell.exe -NoProfile -executionpolicy unrestricted -file -Command c:\scripts\executeCustomScript.ps1
        SendCFNSignal:
          commands:
            sendSignal:
              command:
                Fn::Join:
                  - ''
                  - - !Sub 'cfn-signal.exe -e 0 --stack ${AWS::StackName} '
                    - !Sub ' --resource AppASG --region ${AWS::Region}'
        enableMonitoring:
          commands:
            00-getcloudwatchSettings:
              waitAfterCompletion: 3
              command: powershell.exe -Command c:\scripts\configureMonitoring.ps1
        InstallDSAgent:
          commands:
            00-getAgentScriptAndRun:
              command: powershell.exe -Command c:\scripts\getAndRunDsAgentDeploymentScript.ps1
        InstallDataDogAgent:
          commands:
            00-getAgentScriptAndRun:
              command: powershell.exe -Command c:\scripts\getAndRunDatadogAgentDeploymentScript.ps1
        # InstallOpenjdk:
        #   commands:
        #     00-installopnjdk:
        #       command: powershell.exe -Command c:\scripts\installopenjdk.ps1
        #     01-setJavaHome:
        #       waitAfterCompletion: 3
        #       command: setx /m JAVA_HOME "D:\ApplicationTools\OpenJdk\bin\"
    Properties:
      ImageId: !Ref AMI
      InstanceMonitoring: true
      SecurityGroups:
        - !Ref AppSecurityGroup
      InstanceType: !Ref InstanceType
      IamInstanceProfile:
        Fn::Join:
          - ''
          - - 'arn:aws:iam::'
            - !Sub "${AWS::AccountId}:instance-profile/ECAppInstanceProfile-${AWS::AccountId}-${AWS::Region}"
      KeyName: !Ref KeyName
      BlockDeviceMappings:
        - DeviceName: /dev/xvdb
          Ebs:
            VolumeSize: !Ref SeconderyStorageSpaceSize
            Encrypted: true
      UserData:
        Fn::Base64:
          !Sub |
            <script>
              cfn-init.exe -v -c config -s ${AWS::StackId} ^
              -r AppLC --region ${AWS::Region}
            </script>
  AppCPU80:
    Type: AWS::CloudWatch::Alarm
    DependsOn: AppASG
    Properties:
      AlarmName: !Sub "${AWS::StackName}-App-cpu-high"
      ActionsEnabled: true
      AlarmActions:
        - Fn::Join:
            - ''
            - - 'arn:aws:sns:'
              - !Sub "${AWS::Region}:${AWS::AccountId}"
              - !Sub ':${AccountName}:_infrastructure_ops'
      Namespace: PerformanceMonitor
      Statistic: Average
      Period: 60
      EvaluationPeriods: 2
      Threshold: 80
      ComparisonOperator: GreaterThanThreshold
      AlarmDescription: APP instance CPU Utilization more than 80%
      MetricName: UsedCPU
      Dimensions:
        - Name: stackname
          Value: !Ref AWS::StackName
  AppCPU95:
    Type: AWS::CloudWatch::Alarm
    DependsOn: AppASG
    Properties:
      ActionsEnabled: true
      AlarmName: !Sub "${AWS::StackName}-App-cpu-critical"
      AlarmActions:
        - Fn::Join:
            - ''
            - - 'arn:aws:sns:'
              - !Sub "${AWS::Region}:${AWS::AccountId}"
              - !Sub ':${AccountName}:_infrastructure_ops'
      Namespace: PerformanceMonitor
      Statistic: Average
      Period: 60
      EvaluationPeriods: 2
      Threshold: 95
      ComparisonOperator: GreaterThanThreshold
      AlarmDescription: APP instance CPU Utilization more than 80%
      MetricName: UsedCPU
      Dimensions:
        - Name: stackname
          Value: !Ref AWS::StackName
  AppMemory80:
    Type: "AWS::CloudWatch::Alarm"
    DependsOn: AppASG
    Properties:
      ActionsEnabled: true
      AlarmName: !Sub "${AWS::StackName}-App-memory-high"
      AlarmActions:
        - Fn::Join:
            - ''
            - - 'arn:aws:sns:'
              - !Sub "${AWS::Region}:${AWS::AccountId}"
              - !Sub ':${AccountName}:_infrastructure_ops'
      Namespace: PerformanceMonitor
      Statistic: Average
      Period: 60
      EvaluationPeriods: 2
      Threshold: 80
      ComparisonOperator: GreaterThanThreshold
      AlarmDescription: APP instance Memory Utilization more than 80%
      MetricName: UsedMemory
      Dimensions:
        - Name: stackname
          Value: !Ref AWS::StackName
  AppMemory95:
    Type: "AWS::CloudWatch::Alarm"
    DependsOn: AppASG
    Properties:
      ActionsEnabled: true
      AlarmName: !Sub "${AWS::StackName}-App-memory-critical"
      AlarmActions:
        - Fn::Join:
            - ''
            - - 'arn:aws:sns:'
              - !Sub "${AWS::Region}:${AWS::AccountId}"
              - !Sub ':${AccountName}:_infrastructure_ops'
      Namespace: PerformanceMonitor
      Statistic: Average
      Period: 60
      EvaluationPeriods: 2
      Threshold: 95
      ComparisonOperator: GreaterThanThreshold
      AlarmDescription: APP instance Memory Utilization more than 95%
      MetricName: UsedMemory
      Dimensions:
        - Name: stackname
          Value: !Ref AWS::StackName
  AppDisk80:
    Type: "AWS::CloudWatch::Alarm"
    DependsOn: AppASG
    Properties:
      ActionsEnabled: true
      AlarmName: !Sub "${AWS::StackName}-App-disk-high"
      AlarmActions:
        - Fn::Join:
            - ''
            - - 'arn:aws:sns:'
              - !Sub "${AWS::Region}:${AWS::AccountId}"
              - !Sub ':${AccountName}:_infrastructure_ops'
      Namespace: PerformanceMonitor
      Statistic: Average
      Period: 60
      EvaluationPeriods: 3
      Threshold: 80
      ComparisonOperator: GreaterThanThreshold
      AlarmDescription: APP instance Memory Utilization more than 80%
      MetricName: Disk
      Dimensions:
        - Name: stackname
          Value: !Ref AWS::StackName
  AppDisk95:
    Type: "AWS::CloudWatch::Alarm"
    DependsOn: AppASG
    Properties:
      ActionsEnabled: true
      AlarmName: !Sub "${AWS::StackName}-App-disk-critical"
      AlarmActions:
        - Fn::Join:
            - ''
            - - 'arn:aws:sns:'
              - !Sub "${AWS::Region}:${AWS::AccountId}"
              - !Sub ':${AccountName}:_infrastructure_ops'
      Namespace: PerformanceMonitor
      Statistic: Average
      Period: 60
      EvaluationPeriods: 3
      Threshold: 95
      ComparisonOperator: GreaterThanThreshold
      AlarmDescription: APP instance Memory Utilization more than 95%
      MetricName: Disk
      Dimensions:
        - Name: stackname
          Value: !Ref AWS::StackName
  AppSwapUsage75:
    Type: "AWS::CloudWatch::Alarm"
    DependsOn: AppASG
    Properties:
      ActionsEnabled: true
      AlarmName: !Sub "${AWS::StackName}-App-SWAP-high"
      AlarmActions:
        - Fn::Join:
            - ''
            - - 'arn:aws:sns:'
              - !Sub "${AWS::Region}:${AWS::AccountId}"
              - !Sub ':${AccountName}:_infrastructure_ops'
      Namespace: PerformanceMonitor
      Statistic: Average
      Period: 60
      EvaluationPeriods: 2
      Threshold: 75
      ComparisonOperator: GreaterThanThreshold
      AlarmDescription: APP instance Memory Utilization more than 95%
      MetricName: Swap
      Dimensions:
        - Name: stackname
          Value: !Ref AWS::StackName
  AppLBHealthyCount:
    Type: "AWS::CloudWatch::Alarm"
    DependsOn: AppASG
    Properties:
      ActionsEnabled: true
      AlarmName: !Sub "${AWS::StackName}-App-LB-HealthyCount"
      AlarmActions:
        - Fn::Join:
            - ''
            - - 'arn:aws:sns:'
              - !Sub "${AWS::Region}:${AWS::AccountId}"
              - !Sub ':${AccountName}:_infrastructure_ops'
      Namespace: AWS/ApplicationELB
      Statistic: Average
      Period: 60
      EvaluationPeriods: 2
      Threshold: 1
      ComparisonOperator: LessThanThreshold
      AlarmDescription: App instance is inactive.
      MetricName: HealthyHostCount
      Dimensions:
        - Name: LoadBalancer
          Value: !GetAtt [AppLB, LoadBalancerFullName]
        - Name: TargetGroup
          Value: !GetAtt [AppTargetGroup8443, TargetGroupFullName]

# AppNetwork9:
#   Type: "AWS::CloudWatch::Alarm"
#   DependsOn: AppASG
#   Properties:
#     ActionsEnabled: true
#     AlarmName: !Sub "${AWS::StackName}-App-network-critical"
#     AlarmActions:
#       - Fn::Join:
#           - ''
#           - - 'arn:aws:sns:'
#             - !Sub "${AWS::Region}:${AWS::AccountId}"
#             - !Sub ':${AccountName}:_infrastructure_ops'
#     Namespace: PerformanceMonitor
#     Statistic: Average
#     Period: 30
#     EvaluationPeriods: 2
#     Threshold: 9000000
#     ComparisonOperator: GreaterThanThreshold
#     AlarmDescription: Network usage critical.
#     MetricName: NetworkBPS
#     Dimensions:
#       - Name: stackname
#         Value: !Ref AWS::StackName
# AppNetwork7:
#   Type: "AWS::CloudWatch::Alarm"
#   DependsOn: AppASG
#   Properties:
#     ActionsEnabled: true
#     AlarmName: !Sub "${AWS::StackName}-App-network-high"
#     AlarmActions:
#       - Fn::Join:
#           - ''
#           - - 'arn:aws:sns:'
#             - !Sub "${AWS::Region}:${AWS::AccountId}"
#             - !Sub ':${AccountName}:_infrastructure_ops'
#     Namespace: PerformanceMonitor
#     Statistic: Average
#     Period: 30
#     EvaluationPeriods: 2
#     Threshold: 8000000
#     ComparisonOperator: GreaterThanThreshold
#     AlarmDescription: Network usage critical.
#     MetricName: NetworkBPS
#     Dimensions:
#       - Name: stackname
#         Value: !Ref AWS::StackName
Outputs:
  AppDNS:
    Value: !GetAtt [AppLB, DNSName]
  AppLbArn:
    Value: !Ref AppLB
